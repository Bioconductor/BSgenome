import(methods)
import(IRanges)
import(Biostrings)

exportClasses(
    GenomeDescription,
    BSgenome,
    GenomeData, GenomeDataList,

    ## BSgenomeForge classes:
    BSgenomeDataPkgSeed
)

export(
    ## Non-generic functions:
    installed.genomes, available.genomes,
    BSgenome,
    installed.SNPs, available.SNPs,
    bsapply,
    GenomeData, GenomeDataList, gdreduce,

    ## Generic functions:
    organism, species,
    provider, providerVersion,
    releaseDate, releaseName,
    sourceUrl,
    SNPlocs_pkgname, SNPcount, SNPlocs,
    seqnames, seqlengths, mseqnames,
    masknames,
    injectSNPs,
    strand,
    getSeq,
    gdapply, gdApply,

    ## BSgenomeForge functions:
    forgeSeqlengthsFile,
    forgeSeqFiles,
    forgeMasksFiles,
    forgeBSgenomeDataPkg
)

exportMethods(
    ## Methods for generics defined elsewhere:
    names, show, length, "[[", "$", score,
    matchPWM, countPWM, vmatchPattern, vcountPattern,

    ## Methods for generics defined in this package:
    organism, species, provider, providerVersion,
    releaseDate, releaseName, sourceUrl,
    SNPlocs_pkgname, SNPcount, SNPlocs,
    seqnames, "seqnames<-", seqlengths, mseqnames,
    masknames,
    injectSNPs,
    gdapply,

    ## BSgenomeForge methods:
    forgeBSgenomeDataPkg
)


### ==========================================================================
### GRanges
### --------------------------------------------------------------------------

exportClasses(GRanges, GRangesList)

export(GRanges, GRangesList)

exportMethods("coerce", "as.data.frame",
              "seqnames", "ranges", "strand", "values",
              "seqnames<-", "ranges<-", "strand<-", "values<-",
              "names", "names<-",
              "start", "end", "width", "start<-", "end<-", "width<-",
              "shift", "coverage",
              "ncol", "colnames", "colnames<-",
              "[", "[<-", "c", "length", "rev", "seqselect", "seqselect<-",
              "split", "window",
              "show",
              "pintersect",
              "findOverlaps", "countOverlaps", "match", "%in%")
